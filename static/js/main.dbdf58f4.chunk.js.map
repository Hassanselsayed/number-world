{"version":3,"sources":["firebase.js","components/factGenerator/MainFactLand.js","components/factGenerator/FactLand.js","components/numbersGame/NumberLand.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","MainFactLand","handleChange","e","setState","userInput","target","value","state","action","onSubmit","props","chosenNumberHandler","htmlFor","className","autoComplete","type","id","min","max","title","onChange","this","required","randomNumberHandler","usedNumber","triviaFact","Component","Factland","numberApi","queryNumber","axios","url","responseType","paramsSerializer","params","Qs","stringify","arrayFormat","reqUrl","xmlToJSON","then","result","copyOfNumbersTried","numbersTried","push","data","catch","alert","chosenNumber","preventDefault","database","ref","document","getElementById","focus","randomNumber","Math","floor","random","on","response","dataFromDb","val","stateToBeSet","key","numberUsed","name","length","splice","map","number","onClick","changePage","NumberLand","newtonApi","expression","method","res","operation","question","correctAnswer","submitUserChoice","userAnswer","outcome","userSelection","evaluateAnswer","getUserChoice","event","defaultValue","disabled","App","changePageHandler","factLand","Helmet","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.dbdf58f4.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDmuSVdR0wnCTRy1nEgcNsMgyEI48P9xaQ\",\r\n    authDomain: \"numberlandhassanelsayed.firebaseapp.com\",\r\n    databaseURL: \"https://numberlandhassanelsayed.firebaseio.com\",\r\n    projectId: \"numberlandhassanelsayed\",\r\n    storageBucket: \"numberlandhassanelsayed.appspot.com\",\r\n    messagingSenderId: \"1052401100505\",\r\n    appId: \"1:1052401100505:web:5287596107ba308a0bc0c8\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { Component } from \"react\";\r\n\r\nclass MainFactLand extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            userInput: \"\",\r\n        }\r\n    }\r\n\r\n    // tracking change in user's number choice\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            userInput: e.target.value,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <main>\r\n                <form action=\"\" onSubmit={\r\n                        (e) => { \r\n                                this.props.chosenNumberHandler(e, this.state.userInput);\r\n                                this.setState({\r\n                                    userInput: \"\",\r\n                                });\r\n                            }\r\n                    }\r\n                >\r\n                    <label htmlFor=\"numberInput\"><h3>Please enter a number (1 to 100):<span className=\"sr-only\">1 to 100</span></h3></label>\r\n                    <input\r\n                        autoComplete=\"off\"\r\n                        type=\"number\"\r\n                        id=\"numberInput\"\r\n                        min=\"1\"\r\n                        max=\"100\"\r\n                        title=\"1 to 100\"\r\n                        onChange={this.handleChange}\r\n                        value={this.state.userInput}\r\n                        required\r\n                    />\r\n                    <button>Submit</button>\r\n                </form>\r\n                <p>or</p>\r\n                <form action=\"\" onSubmit={(e) => this.props.randomNumberHandler(e)}>\r\n                    <h3>Generate a number randomly (1 to 100):</h3>\r\n                    <button id=\"randomGenerator\">Submit</button>\r\n                </form>\r\n                <div className=\"results\">\r\n                    <h2>Number chosen/generated: {this.props.usedNumber}</h2>\r\n                    <h2>Fact about that number:</h2>\r\n                    <ul>\r\n                        {/* trivia facts will be added dynamically here after being fetched from the numbers API*/}\r\n                        {this.props.triviaFact !== \"\" ? <li>{this.props.triviaFact}</li> : null}\r\n                    </ul>\r\n                </div>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainFactLand;","import React, { Component } from \"react\";\r\n\r\n// custom imports\r\nimport axios from \"axios\";\r\nimport firebase from \"../../firebase\";\r\nimport Qs from \"qs\";\r\nimport MainFactLand from \"./MainFactLand\";\r\n\r\nclass Factland extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            usedNumber: \"\",\r\n            triviaFact: \"\",\r\n            numbersTried: []\r\n        }\r\n    }\r\n\r\n    // making the fact generator API call\r\n    numberApi = (queryNumber) => {\r\n        axios({\r\n            url: \"https://proxy.hackeryou.com\",\r\n            responseType: \"\",\r\n            paramsSerializer: function (params) {\r\n                return Qs.stringify(params, { arrayFormat: \"brackets\" })\r\n            },\r\n            params: {\r\n                reqUrl: `http://numbersapi.com/${queryNumber}`,\r\n                xmlToJSON: false\r\n            }\r\n        }).then((result) => {\r\n            const copyOfNumbersTried = this.state.numbersTried;\r\n\r\n            copyOfNumbersTried.push(queryNumber);\r\n\r\n            this.setState({\r\n                usedNumber: queryNumber,\r\n                triviaFact: result.data,\r\n                numbersTried: copyOfNumbersTried,\r\n            })\r\n        }).catch(() => {\r\n            alert('please slow down');\r\n        });\r\n    }\r\n\r\n    // storing data in firebase and updating the numbers tried array\r\n    componentDidMount() {\r\n        const dbRef = firebase.database().ref();\r\n\r\n        dbRef.on(\"value\", (response) => {\r\n            const dataFromDb = response.val();\r\n\r\n            const stateToBeSet = [];\r\n\r\n\r\n            for (let key in dataFromDb) {\r\n                const numberUsed = {\r\n                    key: key,\r\n                    name: dataFromDb[key],\r\n                }\r\n                stateToBeSet.push(numberUsed)\r\n                if(stateToBeSet.length >= 11) {\r\n                    stateToBeSet.splice(0, 1);\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                numbersTried: stateToBeSet,\r\n            }, () => {\r\n\r\n            })\r\n        });\r\n    }\r\n\r\n    // storing the chosen number and passing it to the API call\r\n    chosenNumberHandler = (e, chosenNumber) => {\r\n        e.preventDefault();\r\n\r\n        this.numberApi(chosenNumber);\r\n\r\n        const dbRef = firebase.database().ref();\r\n        dbRef.push(chosenNumber);\r\n        \r\n        document.getElementById(\"numberInput\").focus();\r\n    }\r\n\r\n    // generating a random number and passing it to the API call\r\n    randomNumberHandler = (e) => {\r\n        e.preventDefault();\r\n        const randomNumber = Math.floor((Math.random() * 100) + 1);\r\n        this.numberApi(randomNumber);\r\n\r\n        const dbRef = firebase.database().ref();\r\n        dbRef.push(randomNumber);\r\n\r\n        document.getElementById(\"randomGenerator\").focus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"FactLand wrapper\">\r\n                <h1>Facts generator</h1>\r\n                <div className=\"gridSystem\">\r\n                    <aside className=\"leftAside\">\r\n                        <h4>Recommended numbers:</h4>\r\n                        <ul>\r\n                            <li>7</li>\r\n                            <li>13</li>\r\n                            <li>21</li>\r\n                            <li>34</li>\r\n                            <li>46</li>\r\n                            <li>57</li>\r\n                            <li>64</li>\r\n                            <li>75</li>\r\n                            <li>89</li>\r\n                            <li>98</li>\r\n                        </ul>\r\n                    </aside>\r\n\r\n                    <MainFactLand chosenNumberHandler={this.chosenNumberHandler} randomNumberHandler={this.randomNumberHandler} usedNumber={this.state.usedNumber} triviaFact={this.state.triviaFact} />\r\n\r\n                    <aside className=\"rightAside\">\r\n                        <h4>Numbers tried (last ten):</h4>\r\n                        <ul>\r\n                            {/* numbers tried by the user will be added here after being stored in Firebase */}\r\n                            {\r\n                                this.state.numbersTried.map((number) => {\r\n                                    return (\r\n                                        number.name\r\n                                        ? <li key={number.key}>{number.name}</li>\r\n                                        : null\r\n                                    )\r\n                                })\r\n                            }\r\n                        </ul>\r\n                    </aside>\r\n                </div>\r\n\r\n                {/* button to change page to NumberLand */}\r\n                <button onClick={this.props.changePage} className=\"changePage\">Go to Numbers Game</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Factland;","import React, { Component } from \"react\";\r\n\r\n// custom imports\r\nimport axios from \"axios\";\r\n\r\nclass NumberLand extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            userSelection: \"\",\r\n            expression: \"\",\r\n            question: \"\",\r\n            userAnswer: \"\",\r\n            correctAnswer: \"\",\r\n            outcome: \"\"\r\n        }\r\n    }\r\n\r\n    // making the numbers game API call\r\n    newtonApi = (expression) => {\r\n        axios({\r\n            url: `https://newton.now.sh/${expression}`,\r\n            method: \"GET\",\r\n            responseType: \"json\",\r\n        }).then((res) => {\r\n            this.setState({\r\n                expression: `${res.data.operation}:`,\r\n                question: res.data.expression,\r\n                correctAnswer: res.data.result\r\n            })\r\n        });\r\n    }\r\n\r\n    // fetching the user difficulty level selection and appending a question to the page\r\n    submitUserChoice = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            userAnswer: \"\",\r\n            outcome: \"\"\r\n        })\r\n        document.getElementById(\"userAnswer\").focus();\r\n        if (this.state.userSelection === \"easy\") {\r\n            this.newtonApi(\"simplify/2^2+2(2)\");\r\n        } else if (this.state.userSelection === \"medium\") {\r\n            this.newtonApi(\"factor/x^2-1\");\r\n        } else {\r\n            this.newtonApi(\"integrate/x^2+2x\");\r\n        } \r\n    }\r\n\r\n    // evaluating the user's answer and comparing it to the correct answer\r\n    evaluateAnswer = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.userSelection !== \"\") {\r\n            if (this.state.userAnswer === this.state.correctAnswer) {\r\n                this.setState({\r\n                    outcome: \"Correct answer!\"\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    outcome: \"Try again\"\r\n                })\r\n            }\r\n        } else {\r\n            document.getElementById(\"difficultyLevel\").focus();\r\n            this.setState({\r\n                outcome: \"Please select a difficulty level first\"\r\n            })\r\n        }\r\n        this.setState({\r\n            userAnswer: \"\"\r\n        })\r\n    }\r\n\r\n    // listening for change in difficulty level selection\r\n    getUserChoice = (event) => {\r\n        this.setState({\r\n            userSelection: event.target.value,\r\n        })\r\n    }\r\n\r\n    // tracking change in user's answer\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            userAnswer: e.target.value,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"NumberLand wrapper\">\r\n                <h1>Numbers Game</h1>\r\n\r\n                {/* form to choose difficulty level */}\r\n                <form action=\"\" onSubmit={this.submitUserChoice}>\r\n                    <h2>Please choose a difficulty level</h2>\r\n                    <select onChange={this.getUserChoice} name=\"difficultyLevel\" id=\"difficultyLevel\" defaultValue=\"none\">\r\n                        <option value=\"none\" disabled>Choose a difficulty level</option>\r\n                        <option value=\"easy\">What is Math?</option>\r\n                        <option value=\"medium\">Meh</option>\r\n                        <option value=\"hard\">My middle name is Gauss</option>\r\n                    </select>\r\n                    <button>Choose level</button>\r\n                </form>\r\n\r\n                {/* form to submit answer */}\r\n                <form action=\"\" onSubmit={this.evaluateAnswer}>\r\n                    <h2>Solve the following expression (after choosing difficulty)</h2>\r\n                    \r\n                    {/* math expression will be added here after being fetched from the API */}\r\n                    <p className=\"dynamicContent\"><span>{this.state.expression}</span>{this.state.question}</p>\r\n                    <label htmlFor=\"userAnswer\">Please enter your answer</label>\r\n                    <input \r\n                        autoComplete=\"off\"\r\n                        type=\"text\"\r\n                        id=\"userAnswer\"\r\n                        onChange={this.handleChange}\r\n                        value={this.state.userAnswer}\r\n                        required\r\n                    />\r\n                    <button>Submit answer</button>\r\n                </form>\r\n                {/* outcome will be added here after cross-referencing the user answer with the correct answer */}\r\n                <p className=\"dynamicContent outcome\">{this.state.outcome}</p>\r\n\r\n                {/* button to change page to FactLand */}\r\n                <button onClick={this.props.changePage} className=\"changePage\">Go to Facts Generator</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NumberLand;","import React, { Component } from \"react\";\nimport \"./App.css\";\n\n// custom imports\nimport { Helmet } from \"react-helmet\";\nimport Factland from \"./components/factGenerator/FactLand\";\nimport NumberLand from \"./components/numbersGame/NumberLand\";\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      factLand: true,\n    }\n  }\n\n  // toggling between pages\n  changePageHandler = () => {\n    if (this.state.factLand) {\n      this.setState({\n        factLand: false,\n      })\n    } else {\n      this.setState({\n        factLand: true,\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Helmet>\n          <title>Number World</title>\n        </Helmet>\n        {\n          this.state.factLand\n            ? <Factland changePage={this.changePageHandler} />\n            : <NumberLand changePage={this.changePageHandler} />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}